/*
 * Copyright (c) 2019, Arm Limited and affiliates
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <stdlib.h>

#if defined(ATCA_HAL_I2C)
#include "TCPSocket.h"
#include "mbedtls/config.h"
#include "mbedtls/platform.h"
#include "mbedtls/ssl.h"
#include "mbedtls/entropy.h"
#include "mbedtls/ctr_drbg.h"
#include "mbedtls/error.h"
#include "psa/crypto.h"
#include "psa/lifecycle.h"
#include "atecc608a_se.h"

/* The application-specific key ID for the device private key. */
#define EXAMPLE_DEVICE_KEY_ID 3

#define TEST_MACHINE_IP "10.2.202.186"

/* Chain of trusted CAs in DER format */
static const uint8_t tls_der_ca[] = {
    0x30, 0x82, 0x03, 0x41, 0x30, 0x82, 0x02, 0x29,
    0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x13, 0x06,
    0x6c, 0x9f, 0xcf, 0x99, 0xbf, 0x8c, 0x0a, 0x39,
    0xe2, 0xf0, 0x78, 0x8a, 0x43, 0xe6, 0x96, 0x36,
    0x5b, 0xca, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
    0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
    0x00, 0x30, 0x39, 0x31, 0x0b, 0x30, 0x09, 0x06,
    0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53,
    0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04,
    0x0a, 0x13, 0x06, 0x41, 0x6d, 0x61, 0x7a, 0x6f,
    0x6e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55,
    0x04, 0x03, 0x13, 0x10, 0x41, 0x6d, 0x61, 0x7a,
    0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20,
    0x43, 0x41, 0x20, 0x31, 0x30, 0x1e, 0x17, 0x0d,
    0x31, 0x35, 0x30, 0x35, 0x32, 0x36, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x33,
    0x38, 0x30, 0x31, 0x31, 0x37, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x5a, 0x30, 0x39, 0x31, 0x0b,
    0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
    0x02, 0x55, 0x53, 0x31, 0x0f, 0x30, 0x0d, 0x06,
    0x03, 0x55, 0x04, 0x0a, 0x13, 0x06, 0x41, 0x6d,
    0x61, 0x7a, 0x6f, 0x6e, 0x31, 0x19, 0x30, 0x17,
    0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x10, 0x41,
    0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x20, 0x52, 0x6f,
    0x6f, 0x74, 0x20, 0x43, 0x41, 0x20, 0x31, 0x30,
    0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
    0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30,
    0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,
    0xb2, 0x78, 0x80, 0x71, 0xca, 0x78, 0xd5, 0xe3,
    0x71, 0xaf, 0x47, 0x80, 0x50, 0x74, 0x7d, 0x6e,
    0xd8, 0xd7, 0x88, 0x76, 0xf4, 0x99, 0x68, 0xf7,
    0x58, 0x21, 0x60, 0xf9, 0x74, 0x84, 0x01, 0x2f,
    0xac, 0x02, 0x2d, 0x86, 0xd3, 0xa0, 0x43, 0x7a,
    0x4e, 0xb2, 0xa4, 0xd0, 0x36, 0xba, 0x01, 0xbe,
    0x8d, 0xdb, 0x48, 0xc8, 0x07, 0x17, 0x36, 0x4c,
    0xf4, 0xee, 0x88, 0x23, 0xc7, 0x3e, 0xeb, 0x37,
    0xf5, 0xb5, 0x19, 0xf8, 0x49, 0x68, 0xb0, 0xde,
    0xd7, 0xb9, 0x76, 0x38, 0x1d, 0x61, 0x9e, 0xa4,
    0xfe, 0x82, 0x36, 0xa5, 0xe5, 0x4a, 0x56, 0xe4,
    0x45, 0xe1, 0xf9, 0xfd, 0xb4, 0x16, 0xfa, 0x74,
    0xda, 0x9c, 0x9b, 0x35, 0x39, 0x2f, 0xfa, 0xb0,
    0x20, 0x50, 0x06, 0x6c, 0x7a, 0xd0, 0x80, 0xb2,
    0xa6, 0xf9, 0xaf, 0xec, 0x47, 0x19, 0x8f, 0x50,
    0x38, 0x07, 0xdc, 0xa2, 0x87, 0x39, 0x58, 0xf8,
    0xba, 0xd5, 0xa9, 0xf9, 0x48, 0x67, 0x30, 0x96,
    0xee, 0x94, 0x78, 0x5e, 0x6f, 0x89, 0xa3, 0x51,
    0xc0, 0x30, 0x86, 0x66, 0xa1, 0x45, 0x66, 0xba,
    0x54, 0xeb, 0xa3, 0xc3, 0x91, 0xf9, 0x48, 0xdc,
    0xff, 0xd1, 0xe8, 0x30, 0x2d, 0x7d, 0x2d, 0x74,
    0x70, 0x35, 0xd7, 0x88, 0x24, 0xf7, 0x9e, 0xc4,
    0x59, 0x6e, 0xbb, 0x73, 0x87, 0x17, 0xf2, 0x32,
    0x46, 0x28, 0xb8, 0x43, 0xfa, 0xb7, 0x1d, 0xaa,
    0xca, 0xb4, 0xf2, 0x9f, 0x24, 0x0e, 0x2d, 0x4b,
    0xf7, 0x71, 0x5c, 0x5e, 0x69, 0xff, 0xea, 0x95,
    0x02, 0xcb, 0x38, 0x8a, 0xae, 0x50, 0x38, 0x6f,
    0xdb, 0xfb, 0x2d, 0x62, 0x1b, 0xc5, 0xc7, 0x1e,
    0x54, 0xe1, 0x77, 0xe0, 0x67, 0xc8, 0x0f, 0x9c,
    0x87, 0x23, 0xd6, 0x3f, 0x40, 0x20, 0x7f, 0x20,
    0x80, 0xc4, 0x80, 0x4c, 0x3e, 0x3b, 0x24, 0x26,
    0x8e, 0x04, 0xae, 0x6c, 0x9a, 0xc8, 0xaa, 0x0d,
    0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x42, 0x30,
    0x40, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,
    0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01,
    0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d,
    0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02,
    0x01, 0x86, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x84, 0x18, 0xcc,
    0x85, 0x34, 0xec, 0xbc, 0x0c, 0x94, 0x94, 0x2e,
    0x08, 0x59, 0x9c, 0xc7, 0xb2, 0x10, 0x4e, 0x0a,
    0x08, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
    0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
    0x03, 0x82, 0x01, 0x01, 0x00, 0x98, 0xf2, 0x37,
    0x5a, 0x41, 0x90, 0xa1, 0x1a, 0xc5, 0x76, 0x51,
    0x28, 0x20, 0x36, 0x23, 0x0e, 0xae, 0xe6, 0x28,
    0xbb, 0xaa, 0xf8, 0x94, 0xae, 0x48, 0xa4, 0x30,
    0x7f, 0x1b, 0xfc, 0x24, 0x8d, 0x4b, 0xb4, 0xc8,
    0xa1, 0x97, 0xf6, 0xb6, 0xf1, 0x7a, 0x70, 0xc8,
    0x53, 0x93, 0xcc, 0x08, 0x28, 0xe3, 0x98, 0x25,
    0xcf, 0x23, 0xa4, 0xf9, 0xde, 0x21, 0xd3, 0x7c,
    0x85, 0x09, 0xad, 0x4e, 0x9a, 0x75, 0x3a, 0xc2,
    0x0b, 0x6a, 0x89, 0x78, 0x76, 0x44, 0x47, 0x18,
    0x65, 0x6c, 0x8d, 0x41, 0x8e, 0x3b, 0x7f, 0x9a,
    0xcb, 0xf4, 0xb5, 0xa7, 0x50, 0xd7, 0x05, 0x2c,
    0x37, 0xe8, 0x03, 0x4b, 0xad, 0xe9, 0x61, 0xa0,
    0x02, 0x6e, 0xf5, 0xf2, 0xf0, 0xc5, 0xb2, 0xed,
    0x5b, 0xb7, 0xdc, 0xfa, 0x94, 0x5c, 0x77, 0x9e,
    0x13, 0xa5, 0x7f, 0x52, 0xad, 0x95, 0xf2, 0xf8,
    0x93, 0x3b, 0xde, 0x8b, 0x5c, 0x5b, 0xca, 0x5a,
    0x52, 0x5b, 0x60, 0xaf, 0x14, 0xf7, 0x4b, 0xef,
    0xa3, 0xfb, 0x9f, 0x40, 0x95, 0x6d, 0x31, 0x54,
    0xfc, 0x42, 0xd3, 0xc7, 0x46, 0x1f, 0x23, 0xad,
    0xd9, 0x0f, 0x48, 0x70, 0x9a, 0xd9, 0x75, 0x78,
    0x71, 0xd1, 0x72, 0x43, 0x34, 0x75, 0x6e, 0x57,
    0x59, 0xc2, 0x02, 0x5c, 0x26, 0x60, 0x29, 0xcf,
    0x23, 0x19, 0x16, 0x8e, 0x88, 0x43, 0xa5, 0xd4,
    0xe4, 0xcb, 0x08, 0xfb, 0x23, 0x11, 0x43, 0xe8,
    0x43, 0x29, 0x72, 0x62, 0xa1, 0xa9, 0x5d, 0x5e,
    0x08, 0xd4, 0x90, 0xae, 0xb8, 0xd8, 0xce, 0x14,
    0xc2, 0xd0, 0x55, 0xf2, 0x86, 0xf6, 0xc4, 0x93,
    0x43, 0x77, 0x66, 0x61, 0xc0, 0xb9, 0xe8, 0x41,
    0xd7, 0x97, 0x78, 0x60, 0x03, 0x6e, 0x4a, 0x72,
    0xae, 0xa5, 0xd1, 0x7d, 0xba, 0x10, 0x9e, 0x86,
    0x6c, 0x1b, 0x8a, 0xb9, 0x59, 0x33, 0xf8, 0xeb,
    0xc4, 0x90, 0xbe, 0xf1, 0xb9,
};

/* Server to connect to */
static const char *server = "os.mbed.com";

/* Mbed TLS contexts */
mbedtls_platform_context platform_ctx;
mbedtls_entropy_context entropy;
mbedtls_ctr_drbg_context ctr_drbg;
mbedtls_x509_crt cacert;
mbedtls_ssl_context ssl;
mbedtls_ssl_config ssl_conf;

int my_ssl_send(void *ctx, const unsigned char *buf, size_t len)
{
    TCPSocket *socket = static_cast<TCPSocket *>(ctx);
    int ret;

    ret = socket->send(buf, len);
    if (ret == NSAPI_ERROR_WOULD_BLOCK) {
        ret = MBEDTLS_ERR_SSL_WANT_WRITE;
    } else if (ret < 0) {
        printf("socket.send() returned %d\n", ret);
    }

    return ret;
}

int my_ssl_recv(void *ctx, unsigned char *buf, size_t len)
{
    TCPSocket *socket = static_cast<TCPSocket *>(ctx);
    int ret;

    ret = socket->recv(buf, len);
    if (ret == NSAPI_ERROR_WOULD_BLOCK) {
        ret = MBEDTLS_ERR_SSL_WANT_READ;
    } else if (ret < 0) {
        printf("socket.recv() returned %d\n", ret);
    }

    return ret;
}

int init(void)
{
    int ret;

    ret = mbedtls_platform_setup(&platform_ctx);
    if (ret != 0) {
        printf("Platform initialization failed with error %d\r\n", ret);
        return MBEDTLS_EXIT_FAILURE;
    }

    /* TODO How can Mbed TLS use PSA's entropy? It shouldn't need to if it can
     * use psa_get_random(). */
    mbedtls_entropy_init(&entropy);
    if (ret != 0) {
        printf("failed with error %d\r\n", ret);
        return MBEDTLS_EXIT_FAILURE;
    }

    /* TODO How can Mbed TLS use PSA's DRBG? Make Mbed TLS call
     * psa_get_random() */
    mbedtls_ctr_drbg_init(&ctr_drbg);

    mbedtls_x509_crt_init(&cacert);
    mbedtls_ssl_init(&ssl);
    mbedtls_ssl_config_init(&ssl_conf);

    static const char *personalization = "Mbed OS Example ATECC608A";

    ret = mbedtls_ctr_drbg_seed(
        &ctr_drbg, mbedtls_entropy_func, &entropy,
        reinterpret_cast<const unsigned char*>(personalization),
        sizeof(personalization));
    if (ret != 0) {
        printf("mbedtls_ctr_drbg_seed() returned -0x%04X\n", -ret);
        return ret;
    }

    ret = mbedtls_x509_crt_parse_der_nocopy(&cacert,
                                            tls_der_ca, sizeof(tls_der_ca));
    if (ret != 0) {
        printf("mbedtls_x509_crt_parse() returned -0x%04X\n", -ret);
        return ret;
    }

    ret = mbedtls_ssl_config_defaults(&ssl_conf, MBEDTLS_SSL_IS_CLIENT,
                                      MBEDTLS_SSL_TRANSPORT_STREAM,
                                      MBEDTLS_SSL_PRESET_DEFAULT);
    if (ret != 0) {
        printf("mbedtls_ssl_config_defaults() returned -0x%04X\n",
                       -ret);
        return ret;
    }

    mbedtls_ssl_conf_ca_chain(&ssl_conf, &cacert, NULL);
    mbedtls_ssl_conf_rng(&ssl_conf, mbedtls_ctr_drbg_random, &ctr_drbg);

    mbedtls_ssl_conf_authmode(&ssl_conf, MBEDTLS_SSL_VERIFY_REQUIRED);

    ret = mbedtls_ssl_setup(&ssl, &ssl_conf);
    if (ret != 0) {
        printf("mbedtls_ssl_setup() returned -0x%04X\n", -ret);
        return ret;
    }

    ret = mbedtls_ssl_set_hostname(&ssl, server);
    if (ret != 0) {
        printf("mbedtls_ssl_set_hostname() returned -0x%04X\n", -ret);
        return ret;
    }

    return 0;
}

int main(void)
{
    psa_status_t status;
    nsapi_size_or_error_t ret;

    if (init() != 0)
    {
        return -1;
    }

    printf("Connecting to TLS server...\n");

    printf("\tInitializing PSA Crypto... ");
    fflush(stdout);
    status = psa_crypto_init();
    if (status != PSA_SUCCESS)
    {
        printf("failed with status=%ld\n", status);
        return status;
    }
    printf("done.\n");

    printf("\tGetting network... ");
    fflush(stdout);
    NetworkInterface *net = NetworkInterface::get_default_instance();
    ret = net->connect();
    if (ret != 0) {
        printf("failed with ret=%d\n", ret);
        return ret;
    }
    printf("done\n");

    TCPSocket *socket = new TCPSocket();

    mbedtls_ssl_set_bio(&ssl, static_cast<void *>(socket),
                        my_ssl_send, my_ssl_recv, NULL);

    //socket->set_blocking(false);
    printf("\tOpening socket... ");
    fflush(stdout);
    ret = socket->open(net);
    if (ret != 0) {
        printf("failed with ret=%d\n", ret);
        return ret;
    }
    printf("done\n");

    printf("\tConnecting... ");
    fflush(stdout);
    ret = socket->connect(server, 443);
    if (ret != 0) {
        printf("failed with ret=%d\n", ret);
        return ret;
    }
    printf("done\n");

    /* Start the TLS handshake */
    printf("\tHanshaking with TLS...");
    fflush(stdout);
    do {
        ret = mbedtls_ssl_handshake(&ssl);
    } while (ret != 0 &&
             (ret == MBEDTLS_ERR_SSL_WANT_READ ||
             ret == MBEDTLS_ERR_SSL_WANT_WRITE));
    if (ret < 0) {
        printf("failed with -ret=-0x%04X\n", -ret);
        return ret;
    }
    printf("done\n");

    /* Fill the request buffer */
    printf("\tMaking HTTPS request...");
    fflush(stdout);
    static const char *path = "/media/uploads/mbed_official/hello.txt";
    static char gp_buf[512];
    ret = snprintf(gp_buf, sizeof(gp_buf),
                   "GET %s HTTP/1.1\nHost: %s\n\n", path,
                   server);
    size_t req_len = static_cast<size_t>(ret);
    if (ret < 0 || req_len >= sizeof(gp_buf)) {
        printf("Failed to compose HTTP request using snprintf: %d\n",
                       ret);
        return ret;
    }

    /* Send the HTTP request to the server over TLS */
    size_t req_offset = 0;
    do {
        ret = mbedtls_ssl_write(&ssl,
                reinterpret_cast<const unsigned char *>(gp_buf + req_offset),
                req_len - req_offset);
        if (ret > 0)
            req_offset += static_cast<size_t>(ret);
    } while (req_offset < req_len &&
             (ret > 0 ||
              ret == MBEDTLS_ERR_SSL_WANT_WRITE ||
              ret == MBEDTLS_ERR_SSL_WANT_READ));
    if (ret < 0) {
        printf("failed with -ret=-0x%04X\n", -ret);
        return ret;
    }
    printf("done\n");

    /* Print information about the TLS connection */
    ret = mbedtls_x509_crt_info(gp_buf, sizeof(gp_buf),
                                "\r  ", mbedtls_ssl_get_peer_cert(&ssl));
    if (ret < 0) {
        printf("mbedtls_x509_crt_info() returned -0x%04X\n", -ret);
        return ret;
    }
    printf("Server certificate:\n%s\n", gp_buf);

    /* Ensure certificate verification was successful */
    uint32_t flags = mbedtls_ssl_get_verify_result(&ssl);
    if (flags != 0) {
        ret = mbedtls_x509_crt_verify_info(gp_buf, sizeof(gp_buf),
                                           "\r  ! ", flags);
        if (ret < 0) {
            printf("mbedtls_x509_crt_verify_info() returned "
                           "-0x%04X\n", -ret);
            return ret;
        } else {
            printf("Certificate verification failed (flags %lu):"
                           "\n%s\n", flags, gp_buf);
            return -1;
        }
    } else {
        printf("Certificate verification passed\n");
    }

    printf("Established TLS connection to %s\n", server);

    /* Read response from the server */
    size_t resp_offset = 0;
    bool resp_200 = false;
    bool resp_hello = false;
    do {
        ret = mbedtls_ssl_read(&ssl,
                    reinterpret_cast<unsigned char *>(gp_buf + resp_offset),
                    sizeof(gp_buf) - resp_offset - 1);
        if (ret > 0) {
            resp_offset += static_cast<size_t>(ret);
        }

        /* Ensure that the response string is null-terminated */
        gp_buf[resp_offset] = '\0';

        /* Check  if we received expected string */
        resp_200 = resp_200 || strstr(gp_buf, "200 OK") != NULL;
        resp_hello = resp_hello || strstr(gp_buf, "Hello world!") != NULL;
    } while((!resp_200 || !resp_hello) &&
            (ret > 0 ||
            ret == MBEDTLS_ERR_SSL_WANT_READ || MBEDTLS_ERR_SSL_WANT_WRITE));
    if (ret < 0) {
        printf("mbedtls_ssl_read() returned -0x%04X\n", -ret);
        return ret;
    }

    /* Display response information */
    printf("HTTP: Received %u chars from server\n", resp_offset);
    printf("HTTP: Received '%s' status ... %s\n",
           "200 OK", resp_200 ? "OK" : "FAIL");
    printf("HTTP: Received message:\n%s\n", gp_buf);

    /* TODO Tell Mbed TLS to use the device key as the TLS client key. */

    printf("Success\n");
    return PSA_SUCCESS;
}
#else
int main(void)
{
    printf("Not all of the required options are defined:\n"
           "  - ATCA_HAL_I2C\n");
    return 0;
}
#endif
